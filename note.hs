--[1..5] = [1 2 3 4 5]
print([1..5])
--函数式程序设计关注于计算什么
--函数程序设计的特点：无副作用（赋值语句），强类型（编译时确定而非运行时），代码重用，模块化，没有循环只有递归，高阶函数，惰性计算
--表达式不会计算，直到需要的时候才会算
--类型首字母大写，函数首字母小写
area::Int
area = 3*4


--非尾递归
--空间复杂度更大O(n)，时间复杂度为O(n) linear recursion
sum::[Int]->Int
sum [] = 0 --模式匹配
sum (x:xs) = x + sum xs

--把结果放在参数上，以实现尾递归
--尾递归实现累加
--表面上是递归，实际上代码优化后复杂度和迭代相同
--代码优化后空间复杂度为O(1)，时间复杂度为O(n) iteration
sum::[Int]->Int->Int
sum [] n = n
sum (x:xs) n = sum xs (x+n)

--尾递归实现累乘法
sum::[Int]->Int->Int
sum [] n = n
sum (x:xs) n = sum xs (x*n) 

--在变量前加一个！可以使得表达式强制计算
--函数调用的优先级最高